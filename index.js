console.log("this would be Web Push Provider SDK");

// Feature detection - check if browser supports push messaging.
const check = () => {
  if (!('serviceWorker' in navigator)) {
    throw new Error('Service Worker is not supported on this browser.')
  }
  if (!('PushManager' in window)) {
    throw new Error('Push API is not supported on this browser!')
  }
}

// Register a Service Worker
const registerServiceWorker = async () => {
  const swRegistration = await navigator.serviceWorker.register('service.js'); //register the serviceworker, supply where your serviceworker file is located.
  console.log('Service Worker successfully registered.')
  return swRegistration;
}

// Requesting Permission
const requestNotificationPermission = async () => {
  const permission = await window.Notification.requestPermission();
  // value of permission can be 'granted', 'default', 'denied'
  // granted: user has accepted the request
  // default: user has dismissed the notification permission popup by clicking on x
  // denied: user has denied the request.
  if(permission !== 'granted'){
      throw new Error('Web Push Notification is not granted.');
  }
}


// Triggering a Local Notification for testing purpose. (Optional, in reality, push notification will be coming from server-side)
// Two types of notification: Local Notification generated by the web app itself and Push Notification generated by a server via a push event.
// comment out this code block b/c we will call the push from server-side
const showLocalNotification = (title, body, swRegistration) => {
  console.log('Showing Local Notification..')
  const options = {
      body: body
      // here you can add more properties like icon, image, vibrate, etc.
  };
  navigator.serviceWorker.ready.then(function(swRegistration) {
    swRegistration.showNotification(title, options);
  })
}


// main will be triggered when a button is clicked.
// 1. check if the browser supports web push notifications
// 2. ask for permission if not already allowed
// 3. register the service worker if permission allows.
// 4. (optional) Send the local notification to test
const main = async () => { //async loading the service worker
    check();
    //const swRegistration = await registerServiceWorker();
    const permission=await requestNotificationPermission();
    if(permission !== 'denied' && permission !== 'default'){
        const swRegistration = await registerServiceWorker();
        showLocalNotification('Incoming..','Buzz! Buzz',swRegistration); //optional.
    }
}

console.log(Notification.permission);//output will be either granted, default or denied
